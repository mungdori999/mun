{"ast":null,"code":"import * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nexport default {\n  mounted() {\n    let scene = new THREE.Scene();\n    let renderer = new THREE.WebGLRenderer({\n      canvas: document.querySelector(\"#canvas\"),\n      antialias: true,\n      alpha: true // alpha 옵션을 true로 설정하여 배경을 투명하게\n    });\n    let camera = new THREE.PerspectiveCamera(30, 1);\n    camera.position.set(0, 0, 5);\n\n    // scene.background = new THREE.Color(\"white\");\n    scene.background = null;\n    // OrbitControls 생성\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true; // 부드러운 움직임을 위해 댐핑 활성화\n    controls.dampingFactor = 0.25;\n    controls.screenSpacePanning = false;\n\n    // GLTFLoader를 사용하여 모델 로드\n    const loader = new GLTFLoader();\n    loader.load(\"shiba/scene.gltf\", gltf => {\n      scene.add(gltf.scene);\n      animate(); // 모델 로드 후 애니메이션 시작\n    }, undefined, error => {\n      console.error(\"An error happened\", error);\n    });\n    // 애니메이션 루프\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update(); // 애니메이션 루프 내에서 컨트롤 업데이트\n      renderer.render(scene, camera);\n    };\n    animate();\n  }\n};","map":{"version":3,"names":["THREE","GLTFLoader","OrbitControls","mounted","scene","Scene","renderer","WebGLRenderer","canvas","document","querySelector","antialias","alpha","camera","PerspectiveCamera","position","set","background","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","loader","load","gltf","add","animate","undefined","error","console","requestAnimationFrame","update","render"],"sources":["/Users/mungdori00/mun/vuemun/mun/src/components/MainGame.vue"],"sourcesContent":["<template>\n  <div\n    class=\"d-flex justify-content-center align-items-center vh-100\"\n    style=\"flex-direction: column\"\n  >\n    <div class=\"progress\" style=\"width: 300px;\">\n      <div\n        class=\"progress-bar\"\n        role=\"progressbar\"\n        style=\"width: 25%\"\n        aria-valuenow=\"25\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n      >\n        25%\n      </div>\n    </div>\n    <canvas id=\"canvas\" width=\"600\" height=\"600\"> </canvas>\n  </div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nexport default {\n  mounted() {\n    let scene = new THREE.Scene();\n    let renderer = new THREE.WebGLRenderer({\n      canvas: document.querySelector(\"#canvas\"),\n      antialias: true,\n      alpha: true, // alpha 옵션을 true로 설정하여 배경을 투명하게\n    });\n\n    let camera = new THREE.PerspectiveCamera(30, 1);\n    camera.position.set(0, 0, 5);\n\n    // scene.background = new THREE.Color(\"white\");\n    scene.background = null;\n    // OrbitControls 생성\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true; // 부드러운 움직임을 위해 댐핑 활성화\n    controls.dampingFactor = 0.25;\n    controls.screenSpacePanning = false;\n\n    // GLTFLoader를 사용하여 모델 로드\n    const loader = new GLTFLoader();\n    loader.load(\n      \"shiba/scene.gltf\",\n      (gltf) => {\n        scene.add(gltf.scene);\n        animate(); // 모델 로드 후 애니메이션 시작\n      },\n      undefined,\n      (error) => {\n        console.error(\"An error happened\", error);\n      }\n    );\n    // 애니메이션 루프\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update(); // 애니메이션 루프 내에서 컨트롤 업데이트\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  },\n};\n</script>\n\n<style>\n</style>"],"mappings":"AAsBA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,SAASC,UAAS,QAAS,0CAA0C;AACrE,SAASC,aAAY,QAAS,8CAA8C;AAC5E,eAAe;EACbC,OAAOA,CAAA,EAAG;IACR,IAAIC,KAAI,GAAI,IAAIJ,KAAK,CAACK,KAAK,CAAC,CAAC;IAC7B,IAAIC,QAAO,GAAI,IAAIN,KAAK,CAACO,aAAa,CAAC;MACrCC,MAAM,EAAEC,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC;MACzCC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE,IAAI,CAAE;IACf,CAAC,CAAC;IAEF,IAAIC,MAAK,GAAI,IAAIb,KAAK,CAACc,iBAAiB,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/CD,MAAM,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAE5B;IACAZ,KAAK,CAACa,UAAS,GAAI,IAAI;IACvB;IACA,MAAMC,QAAO,GAAI,IAAIhB,aAAa,CAACW,MAAM,EAAEP,QAAQ,CAACa,UAAU,CAAC;IAC/DD,QAAQ,CAACE,aAAY,GAAI,IAAI,EAAE;IAC/BF,QAAQ,CAACG,aAAY,GAAI,IAAI;IAC7BH,QAAQ,CAACI,kBAAiB,GAAI,KAAK;;IAEnC;IACA,MAAMC,MAAK,GAAI,IAAItB,UAAU,CAAC,CAAC;IAC/BsB,MAAM,CAACC,IAAI,CACT,kBAAkB,EACjBC,IAAI,IAAK;MACRrB,KAAK,CAACsB,GAAG,CAACD,IAAI,CAACrB,KAAK,CAAC;MACrBuB,OAAO,CAAC,CAAC,EAAE;IACb,CAAC,EACDC,SAAS,EACRC,KAAK,IAAK;MACTC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C,CACF,CAAC;IACD;IACA,MAAMF,OAAM,GAAIA,CAAA,KAAM;MACpBI,qBAAqB,CAACJ,OAAO,CAAC;MAC9BT,QAAQ,CAACc,MAAM,CAAC,CAAC,EAAE;MACnB1B,QAAQ,CAAC2B,MAAM,CAAC7B,KAAK,EAAES,MAAM,CAAC;IAChC,CAAC;IAEDc,OAAO,CAAC,CAAC;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}