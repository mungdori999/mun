{"ast":null,"code":"// axiosInstance.js\nimport axios from 'axios';\n\n// Axios 인스턴스를 생성합니다.\nconst axiosInstance = axios.create();\n// 요청 인터셉터를 추가합니다.\naxiosInstance.interceptors.request.use(config => {\n  // 요청이 보내지기 전에 작업 수행\n  const accessToken = localStorage.getItem('access'); // 또는 다른 저장소에서 토큰을 가져올 수 있습니다.\n  console.log(accessToken, \"있냐\");\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  // 요청 오류가 있는 경우 작업 수행\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","interceptors","request","use","config","accessToken","localStorage","getItem","console","log","headers","Authorization","error","Promise","reject"],"sources":["/Users/mungdori00/mun/vuemun/mun/src/axios/axiosinstance.js"],"sourcesContent":["// axiosInstance.js\nimport axios from 'axios';\n\n// Axios 인스턴스를 생성합니다.\nconst axiosInstance = axios.create();\n// 요청 인터셉터를 추가합니다.\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // 요청이 보내지기 전에 작업 수행\n    const accessToken = localStorage.getItem('access'); // 또는 다른 저장소에서 토큰을 가져올 수 있습니다.\n    console.log(accessToken,\"있냐\")\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    // 요청 오류가 있는 경우 작업 수행\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC,CAAC;AACpC;AACAD,aAAa,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;EACpDC,OAAO,CAACC,GAAG,CAACJ,WAAW,EAAC,IAAI,CAAC;EAC7B,IAAIA,WAAW,EAAE;IACfD,MAAM,CAACM,OAAO,CAACC,aAAa,GAAG,UAAUN,WAAW,EAAE;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}