{"ast":null,"code":"// axiosInstance.js\nimport axios from 'axios';\nimport Swal from \"sweetalert2\";\n// Axios 인스턴스를 생성합니다.\nconst axiosInstance = axios.create();\n// 요청 인터셉터를 추가합니다.\naxiosInstance.interceptors.request.use(config => {\n  // 요청이 보내지기 전에 작업 수행\n  const accessToken = localStorage.getItem('access'); // 또는 다른 저장소에서 토큰을 가져올 수 있습니다.\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터를 추가합니다.\naxiosInstance.interceptors.response.use(response => {\n  // access토큰이 만료했을시 재요청을 보낼수있도록\n  console.log('Response data:', response.data);\n  return response;\n}, error => {\n  // 응답에서 오류가 발생한 경우\n  console.error('Response error:', error.response);\n\n  // 요청 오류가 있는 경우 작업 수행\n  if (error.response.status === 401) {\n    Swal.fire({\n      title: \"로그인 오류\",\n      text: \"다시 로그인 하셈\",\n      icon: \"warning\"\n    });\n  }\n  return Promise.reject(error); // 오류를 호출한 코드로 전달\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","Swal","axiosInstance","create","interceptors","request","use","config","accessToken","localStorage","getItem","headers","Authorization","error","Promise","reject","response","console","log","data","status","fire","title","text","icon"],"sources":["/Users/mungdori00/mun/vuemun/mun/src/axios/axiosinstance.js"],"sourcesContent":["// axiosInstance.js\nimport axios from 'axios';\nimport Swal from \"sweetalert2\";\n// Axios 인스턴스를 생성합니다.\nconst axiosInstance = axios.create();\n// 요청 인터셉터를 추가합니다.\naxiosInstance.interceptors.request.use(\n    (config) => {\n        // 요청이 보내지기 전에 작업 수행\n        const accessToken = localStorage.getItem('access'); // 또는 다른 저장소에서 토큰을 가져올 수 있습니다.\n        if (accessToken) {\n            config.headers.Authorization = `Bearer ${accessToken}`;\n        }\n        return config;\n    },\n    (error) => {\n        \n        return Promise.reject(error);\n    }\n);\n\n// 응답 인터셉터를 추가합니다.\naxiosInstance.interceptors.response.use(\n    (response) => {\n        // access토큰이 만료했을시 재요청을 보낼수있도록\n        console.log('Response data:', response.data);\n        return response;\n    },\n    (error) => {\n        // 응답에서 오류가 발생한 경우\n        console.error('Response error:', error.response);\n\n        // 요청 오류가 있는 경우 작업 수행\n        if (error.response.status === 401) {\n            Swal.fire({\n              title: \"로그인 오류\",\n              text: \"다시 로그인 하셈\",\n              icon: \"warning\",\n            });\n          }\n        return Promise.reject(error); // 오류를 호출한 코드로 전달\n\n        \n    }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAC9B;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC,CAAC;AACpC;AACAD,aAAa,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;EACpD,IAAIF,WAAW,EAAE;IACbD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,WAAW,EAAE;EAC1D;EACA,OAAOD,MAAM;AACjB,CAAC,EACAM,KAAK,IAAK;EAEP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAX,aAAa,CAACE,YAAY,CAACY,QAAQ,CAACV,GAAG,CAClCU,QAAQ,IAAK;EACV;EACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAACG,IAAI,CAAC;EAC5C,OAAOH,QAAQ;AACnB,CAAC,EACAH,KAAK,IAAK;EACP;EACAI,OAAO,CAACJ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACG,QAAQ,CAAC;;EAEhD;EACA,IAAIH,KAAK,CAACG,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;IAC/BnB,IAAI,CAACoB,IAAI,CAAC;MACRC,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;EACF,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAGlC,CACJ,CAAC;AAED,eAAeX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}