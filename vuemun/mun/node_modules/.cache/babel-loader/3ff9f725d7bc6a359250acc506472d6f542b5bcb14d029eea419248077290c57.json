{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"d-flex justify-content-center align-items-center vh-100\",\n  style: {\n    \"flex-direction\": \"column\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"progress-bar\",\n  role: \"progressbar\",\n  style: {\n    \"width\": \"25%\"\n  },\n  \"aria-valuenow\": \"25\",\n  \"aria-valuemin\": \"0\",\n  \"aria-valuemax\": \"100\"\n}, \"25%\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"canvas\",\n  width: \"600\",\n  height: \"600\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = [_hoisted_2, _hoisted_3];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [..._hoisted_4]);\n}","map":{"version":3,"names":["class","style","_createElementVNode","role","id","width","height","_hoisted_2","_hoisted_3","_createElementBlock","_hoisted_1","_hoisted_4"],"sources":["/Users/mungdori00/mun/vuemun/mun/src/components/MainGame.vue"],"sourcesContent":["<template>\n  <div class=\"d-flex justify-content-center align-items-center vh-100\" style=\"    flex-direction: column;\">\n    <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 25%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">25%</div>\n    <canvas id=\"canvas\" width=\"600\" height=\"600\"> </canvas>\n    \n  </div>\n  \n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nexport default {\n  mounted() {\n\n\n    let scene = new THREE.Scene();\n    let renderer = new THREE.WebGLRenderer({\n      canvas: document.querySelector(\"#canvas\"),\n      antialias: true,\n      alpha: true, // alpha 옵션을 true로 설정하여 배경을 투명하게\n    });\n\n    let camera = new THREE.PerspectiveCamera(30, 1);\n    camera.position.set(0, 0, 5);\n\n    // scene.background = new THREE.Color(\"white\");\n        scene.background = null;\n    // OrbitControls 생성\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true; // 부드러운 움직임을 위해 댐핑 활성화\n    controls.dampingFactor = 0.25;\n    controls.screenSpacePanning = false;\n\n    // GLTFLoader를 사용하여 모델 로드\n    const loader = new GLTFLoader();\n    loader.load(\n      \"shiba/scene.gltf\",\n      (gltf) => {\n        scene.add(gltf.scene);\n        animate(); // 모델 로드 후 애니메이션 시작\n      },\n      undefined,\n      (error) => {\n        console.error(\"An error happened\", error);\n      }\n    );\n    // 애니메이션 루프\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update(); // 애니메이션 루프 내에서 컨트롤 업데이트\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  },\n};\n</script>\n\n<style>\n</style>"],"mappings":";;EACOA,KAAK,EAAC,yDAAyD;EAACC,KAAmC,EAAnC;IAAA;EAAA;;gCACnEC,mBAAA,CAAmI;EAA9HF,KAAK,EAAC,cAAc;EAACG,IAAI,EAAC,aAAa;EAACF,KAAmB,EAAnB;IAAA;EAAA,CAAmB;EAAC,eAAa,EAAC,IAAI;EAAC,eAAa,EAAC,GAAG;EAAC,eAAa,EAAC;GAAM,KAAG;gCAC7HC,mBAAA,CAAuD;EAA/CE,EAAE,EAAC,QAAQ;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;oBADvCC,UAAmI,EACnIC,UAAuD,C;;uBAFzDC,mBAAA,CAIM,OAJNC,UAIM,EALR,IAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}