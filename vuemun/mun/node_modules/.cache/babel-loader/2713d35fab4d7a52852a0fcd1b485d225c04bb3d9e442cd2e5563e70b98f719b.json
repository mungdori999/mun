{"ast":null,"code":"// axiosInstance.js\nimport axios from 'axios';\n\n// Axios 인스턴스를 생성합니다.\nconst axiosInstance = axios.create();\n// 요청 인터셉터를 추가합니다.\naxiosInstance.interceptors.request.use(config => {\n  // 요청이 보내지기 전에 작업 수행\n  const accessToken = localStorage.getItem('access');\n  console.log(accessToken);\n  if (accessToken) {\n    config.headers.access = accessToken;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터를 추가합니다.\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  // 오류 처리 함수에서 async 사용\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // 토큰 재발급 요청\n      const response = await axios.post('/api/reissue');\n\n      // 새로운 토큰 저장\n      const newAccessToken = response.data.access;\n      localStorage.setItem('access', newAccessToken);\n\n      // 원래 요청의 헤더를 새로운 토큰으로 업데이트\n      originalRequest.headers.access = newAccessToken;\n      // 원래 요청을 재시도\n      return axiosInstance(originalRequest);\n    } catch (err) {\n      // 토큰 재발급 실패 처리\n      console.error('Token refresh failed:', err);\n      return Promise.reject(err);\n    }\n  }\n\n  // 그 외의 오류 처리\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","interceptors","request","use","config","accessToken","localStorage","getItem","console","log","headers","access","error","Promise","reject","response","originalRequest","status","_retry","post","newAccessToken","data","setItem","err"],"sources":["/Users/mungdori00/mun/vuemun/mun/src/axios/axiosinstance.js"],"sourcesContent":["// axiosInstance.js\nimport axios from 'axios';\n\n// Axios 인스턴스를 생성합니다.\nconst axiosInstance = axios.create();\n// 요청 인터셉터를 추가합니다.\naxiosInstance.interceptors.request.use(\n    (config) => {\n        // 요청이 보내지기 전에 작업 수행\n        const accessToken = localStorage.getItem('access');\n        console.log(accessToken)\n        if (accessToken) {\n            config.headers.access = accessToken;\n        }\n        return config;\n    },\n    (error) => {\n\n        return Promise.reject(error);\n    }\n);\n\n// 응답 인터셉터를 추가합니다.\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    async (error) => {  // 오류 처리 함수에서 async 사용\n        const originalRequest = error.config;\n        \n        if (error.response && error.response.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          \n          try {\n            // 토큰 재발급 요청\n            const response = await axios.post('/api/reissue');\n            \n            // 새로운 토큰 저장\n            const newAccessToken = response.data.access;\n            localStorage.setItem('access', newAccessToken);\n            \n            // 원래 요청의 헤더를 새로운 토큰으로 업데이트\n            originalRequest.headers.access = newAccessToken;\n            // 원래 요청을 재시도\n            return axiosInstance(originalRequest);\n          } catch (err) {\n            // 토큰 재발급 실패 처리\n            console.error('Token refresh failed:', err);\n            return Promise.reject(err);\n          }\n        }\n        \n        // 그 외의 오류 처리\n        return Promise.reject(error); \n      }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC,CAAC;AACpC;AACAD,aAAa,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAClDC,OAAO,CAACC,GAAG,CAACJ,WAAW,CAAC;EACxB,IAAIA,WAAW,EAAE;IACbD,MAAM,CAACM,OAAO,CAACC,MAAM,GAAGN,WAAW;EACvC;EACA,OAAOD,MAAM;AACjB,CAAC,EACAQ,KAAK,IAAK;EAEP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAb,aAAa,CAACE,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAClCY,QAAQ,IAAK;EACV,OAAOA,QAAQ;AACnB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAG;EAChB,MAAMI,eAAe,GAAGJ,KAAK,CAACR,MAAM;EAEpC,IAAIQ,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMH,QAAQ,GAAG,MAAMjB,KAAK,CAACqB,IAAI,CAAC,cAAc,CAAC;;MAEjD;MACA,MAAMC,cAAc,GAAGL,QAAQ,CAACM,IAAI,CAACV,MAAM;MAC3CL,YAAY,CAACgB,OAAO,CAAC,QAAQ,EAAEF,cAAc,CAAC;;MAE9C;MACAJ,eAAe,CAACN,OAAO,CAACC,MAAM,GAAGS,cAAc;MAC/C;MACA,OAAOrB,aAAa,CAACiB,eAAe,CAAC;IACvC,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZ;MACAf,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEW,GAAG,CAAC;MAC3C,OAAOV,OAAO,CAACC,MAAM,CAACS,GAAG,CAAC;IAC5B;EACF;;EAEA;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACN,CAAC;AAED,eAAeb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}